name: Brizy Free Sefl-Hosted
on:
  push:
    branches:
      - disabled
jobs:
  cancel-previous-workflow:
    name: Cancel previous workflow
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: styfle/cancel-workflow-action@0.8.0
        with:
          access_token: ${{ github.token }}
  build-images-and-containers:
    needs: cancel-previous-workflow
    name: Build images and containers
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    environment: Build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2
        with:
          path: main
      - uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Load Build Evnrorment Data
        uses: falti/dotenv-action@master
        id: dotenv
        with:
          path: main/.github/.build-env

      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=EDITOR_CONTAINER_NAME::testing-editor-${{ steps.dotenv.outputs.build_environment }}"
          echo "::set-output name=WORDPRESS_CONTAINER_NAME::testing-wordpress-${{ steps.dotenv.outputs.build_environment }}"
          echo "::set-output name=COMPILER_CONTAINER_NAME::testing-compiler"
          echo "::set-output name=WORDPRESS_IMAGE::brizy/testing-wordpress:${{ steps.dotenv.outputs.build_environment }}"
          echo "::set-output name=EDITOR_IMAGE::brizy/testing-editor:${{ steps.dotenv.outputs.build_environment }}"
          echo "::set-output name=MYSQL_IMAGE::brizy/testing-common-mysql"
          echo "::set-output name=MYSQL_CONTAINER_NAME::testing-common-mysql"
          echo "::set-output name=COMPILER_IMAGE::brizy/testing-compiler"
          echo "::set-output name=DB_NAME::$(echo "brizy_${{ steps.dotenv.outputs.build_environment }}" | sed "s/-/_/g")"
          echo "::set-output name=BITBLOX_DOMAIN::${{ steps.dotenv.outputs.build_environment }}.editor.office.brizy.org"
          echo "::set-output name=NETWORK::traefik"
          echo "::set-output name=DOMAIN::${{ steps.dotenv.outputs.build_environment }}.wordpress.office.brizy.org"
          echo "::set-output name=IS_COMPILER_BUILT::$( sudo docker images -q brizy/testing-compiler )"
          echo "::set-output name=IS_COMPILER_RUINNING::$( docker ps -q -f name=testing-compiler )"
          echo "::set-output name=IS_MYSQL_BUILT::$( sudo docker images -q brizy/testing-common-mysql )"
          echo "::set-output name=IS_MYSQL_RUINNING::$( docker ps -q -f name=testing-common-mysql )"
          echo "::set-output name=IS_MYSQL_VOLUME_CREATED::$( docker volume ls -q --filter="Name=^testing-mysql-volume$" )"

      - name: Checkout BB
        uses: actions/checkout@v2
        with:
          repository: bagrinsergiu/BB
          ssh-key: ${{ secrets.ACCESS_KEY }}
          path: bb
          submodules: 'recursive'
          fetch-depth: '1'

      - name: Change submodule branches
        id: change-branches-on-bb
        shell: bash

        run: |
          cd $GITHUB_WORKSPACE/bb/editor && \
          git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
          git fetch origin ${{ steps.dotenv.outputs.editor_branch }} && \
          git checkout ${{ steps.dotenv.outputs.editor_branch }} && \
          git reset --hard origin/${{ steps.dotenv.outputs.editor_branch }}

          cd $GITHUB_WORKSPACE/bb/wordpress/www/wp-content/plugins/brizy && \
          git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
          git fetch origin ${{ steps.dotenv.outputs.free_branch }} && \
          git checkout ${{ steps.dotenv.outputs.free_branch }} && \
          git reset --hard origin/${{ steps.dotenv.outputs.free_branch }}

          cd $GITHUB_WORKSPACE/bb/wordpress/www/wp-content/plugins/brizy-pro && \
          git config remote.origin.fetch +refs/heads/*:refs/remotes/origin/*
          git fetch origin ${{ steps.dotenv.outputs.pro_branch }} && \
          git checkout ${{ steps.dotenv.outputs.pro_branch }} && \
          git reset --hard origin/${{ steps.dotenv.outputs.pro_branch }}


      - name: Build compiler image
        id: build-compiler
        if: ${{ steps.vars.outputs.IS_COMPILER_BUILT=='' }}
        shell: bash
        run: |
            cd $GITHUB_WORKSPACE/bb/editor.compiler  && npm i
            docker build -t "${{ steps.vars.outputs.COMPILER_IMAGE }}" ./

      - name: Start compiler container
        id: compiler-container-start
        if: ${{ steps.vars.outputs.IS_COMPILER_RUINNING=='' }}
        shell: bash
        run: |
              docker rm "${{ steps.vars.outputs.COMPILER_CONTAINER_NAME }}" || true
              docker run -d  --network="${{ steps.vars.outputs.NETWORK }}" \
                --network-alias="${{ steps.vars.outputs.COMPILER_CONTAINER_NAME }}" \
                --restart=unless-stopped \
                --cpus=3 \
                --memory=2g \
                -e "MAX_CPUS=3" \
                -e "PORT=5000" \
                -e "NODE_ENV=development" \
                -u "1000:1000" \
                --name="${{ steps.vars.outputs.COMPILER_CONTAINER_NAME }}" \
                "${{ steps.vars.outputs.COMPILER_IMAGE }}"

      - name: Build MySQL image
        id: build-mysql-image
        if: ${{ steps.vars.outputs.IS_MYSQL_BUILT=='' }}
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/bb/editor.compiler  && npm i
          docker build -t "${{ steps.vars.outputs.MYSQL_IMAGE }}" $GITHUB_WORKSPACE/bb/mysql

      - name: Create MySQL volume
        id: create-mysql-volume
        if: ${{ steps.vars.outputs.IS_MYSQL_VOLUME_CREATED=='' }}
        shell: bash
        run: |
          docker volume create testing-mysql-volume

      - name: Start MySQL container
        id: start-mysql-container
        if: ${{ steps.vars.outputs.IS_MYSQL_RUINNING=='' }}
        shell: bash
        run: |
          docker stop "${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" || true
          docker rm "${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" || true
          docker run -d --network="${{ steps.vars.outputs.NETWORK }}" \
                          --network-alias="${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" \
                          --name="${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" \
                          --restart=unless-stopped \
                          --cpus=3 \
                          --memory=2g \
                          -e "MAX_CPUS=3" \
                          -e "MYSQL_ROOT_PASSWORD=nopassword" \
                          --mount source=testing-mysql-volume,destination=/var/lib/mysql \
                         "${{ steps.vars.outputs.MYSQL_IMAGE }}"

      - name: Create MySQL database
        id: create-mysql-database
        shell: bash
        run: |
          maxcounter=45
          counter=1
          while !  docker exec "${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" mysql --protocol TCP -uroot -pnopassword -e "show databases;" > /dev/null 2>&1; do
              sleep 1
              counter=`expr $counter + 1`
              if [ $counter -gt $maxcounter ]; then
                  >&2 echo "We have been waiting for MySQL too long already; failing."
                  exit 1
              fi;
          done
          docker exec "${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" mysql -uroot -pnopassword \
              -e "DROP SCHEMA IF EXISTS ${{ steps.vars.outputs.DB_NAME }}; CREATE SCHEMA ${{ steps.vars.outputs.DB_NAME }};"
          docker exec -i "${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" sh -c 'exec mysql -uroot -pnopassword ${{ steps.vars.outputs.DB_NAME }}' < $GITHUB_WORKSPACE/bb/mysql/configure/brizy_localhost-2021_03_09_10_19_48-dump.sql

      - name: Build Editor image
        id: build-editor-image
        shell: bash
        run: |
          cd $GITHUB_WORKSPACE/bb/editor/visual  && npm i

          sed -i "s/'BRIZY_DEVELOPMENT',.[^\)]*/'BRIZY_DEVELOPMENT', true /" "$GITHUB_WORKSPACE/bb/wordpress/www/wp-content/plugins/brizy/brizy.php"
          sed -i "s/'BRIZY_PRO_DEVELOPMENT',.[^\)]*/'BRIZY_PRO_DEVELOPMENT', true /" "$GITHUB_WORKSPACE/bb/wordpress/www/wp-content/plugins/brizy-pro/brizy-pro.php"

          npm run build:brizy -- -t WP -p -e --no-watch --no-verification \
                    --build-dir ../build/free \
                    --build-dir-pro ../build/pro

          cp -r "$GITHUB_WORKSPACE/bb/editor/visual/build/free/dev" "$GITHUB_WORKSPACE/bb/wordpress/www/wp-content/plugins/brizy/public/editor-build"
          cp -r "$GITHUB_WORKSPACE/bb/editor/visual/build/pro/dev"  "$GITHUB_WORKSPACE/bb/wordpress/www/wp-content/plugins/brizy-pro/public/editor-build"

          docker stop "${{ steps.vars.outputs.EDITOR_CONTAINER_NAME }}" || true
          docker rm "${{ steps.vars.outputs.EDITOR_CONTAINER_NAME }}" || true
          docker rmi "${{ steps.vars.outputs.EDITOR_IMAGE }}" || true
          docker build -t "${{ steps.vars.outputs.EDITOR_IMAGE }}" --target remote $GITHUB_WORKSPACE/bb/editor
          docker run -d --network="${{ steps.vars.outputs.NETWORK }}" \
                    --network-alias="${{ steps.vars.outputs.EDITOR_CONTAINER_NAME }}" \
                    --name="${{ steps.vars.outputs.EDITOR_CONTAINER_NAME }}" \
                    --restart=unless-stopped \
                    --cpus=1 \
                    --memory=1g \
                    -e "MAX_CPUS=1" \
                    --label "traefik.docker.network"="${{ steps.vars.outputs.NETWORK }}" \
                    --label "traefik.enable"="true" \
                    --label "traefik.frontend.rule"="Host:${{ steps.vars.outputs.BITBLOX_DOMAIN }}" \
                    --label "traefik.port"="3000" \
                    --label "traefik.frontend.headers.customRequestHeaders"="Access-Control-Allow-Methods:POST,GET,OPTIONS,DELETE,PUT" \
                    --label "traefik.frontend.headers.customRequestHeaders"="Access-Control-Max-Age:1000" \
                    --label "traefik.frontend.headers.customRequestHeaders"="Access-Control-Allow-Headers:x-requested-with,Content-Type,origin,authorization,accept,client-security-token" \
                    "${{ steps.vars.outputs.EDITOR_IMAGE }}"


      - name: Build wordpress image
        id: build-wordpress-image
        shell: bash
        run: |
          docker stop "${{ steps.vars.outputs.WORDPRESS_CONTAINER_NAME }}" || true
          docker rm "${{ steps.vars.outputs.WORDPRESS_CONTAINER_NAME }}" || true
          docker rmi "${{ steps.vars.outputs.WORDPRESS_IMAGE }}" || true
          docker build -t "${{ steps.vars.outputs.WORDPRESS_IMAGE }}" \
                      --target wordpress $GITHUB_WORKSPACE/bb/wordpress
          docker run -d --network="${{ steps.vars.outputs.NETWORK }}" \
                      --network-alias="${{ steps.vars.outputs.WORDPRESS_CONTAINER_NAME }}" \
                      --name="${{ steps.vars.outputs.WORDPRESS_CONTAINER_NAME }}" \
                      --restart=unless-stopped \
                      --cpus=2 \
                      --memory=2g \
                      -e "MAX_CPUS=2" \
                      -e "WORDPRESS_DB_HOST=${{ steps.vars.outputs.MYSQL_CONTAINER_NAME }}" \
                      -e "WORDPRESS_DB_USER=root" \
                      -e "WORDPRESS_DB_PASSWORD=nopassword" \
                      -e "WORDPRESS_DB_NAME=${{ steps.vars.outputs.DB_NAME }}" \
                      -e "WORDPRESS_DEBUG=1" \
                      -e "UPLOAD_LIMIT=512M" \
                      -e "APP_ENV=dev" \
                      -e "EDITOR_HOST=${{ steps.vars.outputs.EDITOR_CONTAINER_NAME }}:3000" \
                      -e "COMPILER_HOST=${{ steps.vars.outputs.COMPILER_CONTAINER_NAME }}:5000" \
                      -e "STATIC_HOST=${{ steps.vars.outputs.BITBLOX_DOMAIN }}:8080" \
                      -e "COMPILER_DOWNLOAD_HOST=${{ steps.vars.outputs.WORDPRESS_CONTAINER_NAME }}" \
                      -e "WORDPRESS_CONFIG_EXTRA=
                          define('FS_METHOD', 'direct');
                          define( 'WP_HOME', 'http://${{ steps.vars.outputs.DOMAIN }}:8080/' );
                          define( 'WP_SITEURL', 'http://${{ steps.vars.outputs.DOMAIN }}:8080/' ); " \
                      --label "traefik.docker.network"="${{ steps.vars.outputs.NETWORK }}" \
                      --label "traefik.enable"="true" \
                      --label "traefik.frontend.rule"="Host:${{ steps.vars.outputs.DOMAIN }}" \
                      --label "traefik.port"="80" \
                      "${{ steps.vars.outputs.WORDPRESS_IMAGE }}"