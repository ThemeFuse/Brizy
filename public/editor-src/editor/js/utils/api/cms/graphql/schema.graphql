input activateCustomerInput {
  """An activation token key"""
  token: String!
  clientMutationId: String
}

type activateCustomerPayload {
  customer: Customer
  clientMutationId: String
}

input BoolSearchQueryInput {
  eq: Boolean
}

input changePasswordCustomerInput {
  id: ID!
  oldPassword: String!
  password: String!
  passwordConfirm: String!
  clientMutationId: String
}

type changePasswordCustomerPayload {
  customer: Customer
  clientMutationId: String
}

input checkCredentialsCustomerInput {
  """Customer's email or userName"""
  login: String!

  """Customer's password"""
  password: String!
  clientMutationId: String
}

type checkCredentialsCustomerPayload {
  customer: Customer
  clientMutationId: String
}

type CmsAbstractApplication implements Node {
  id: ID!
  _id: Int
  title: String
  redirectUris: Iterable
  defaultInstallable: Boolean
  appUrl: String
  clientIdentifier: String
  clientSecret: String
  createdAt: String
  updatedAt: String
}

type CmsApplicationCategory implements Node {
  id: ID!
  _id: Int
  name: String
  slug: String
  count: Int
}

"""Connection for CmsApplicationCategory."""
type CmsApplicationCategoryConnection {
  collection: [CmsApplicationCategory]
  paginationInfo: CmsApplicationCategoryPaginationInfo!
}

"""Information about the pagination."""
type CmsApplicationCategoryPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

type CmsApplicationInstall implements Node {
  id: ID!
  application: CmsAbstractApplication!
  project: Data!
}

"""Connection for CmsApplicationInstall."""
type CmsApplicationInstallConnection {
  collection: [CmsApplicationInstall]
  paginationInfo: CmsApplicationInstallPaginationInfo!
}

"""Information about the pagination."""
type CmsApplicationInstallPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

enum CmsApplicationStatus {
  NEW
  PENDING_REVIEW
  PUBLISHED
}

type CmsPrivateApplication implements Node {
  id: ID!
  clientIdentifier: String
  clientSecret: String
  _id: Int
  title: String
  redirectUris: Iterable
  appUrl: String
}

"""Connection for CmsPrivateApplication."""
type CmsPrivateApplicationConnection {
  collection: [CmsPrivateApplication]
  paginationInfo: CmsPrivateApplicationPaginationInfo!
}

"""Information about the pagination."""
type CmsPrivateApplicationPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

type CmsPublicApplication implements Node {
  id: ID!
  title: String!
  status: CmsApplicationStatus!
  appUrl: String
  redirectUris: [String!]!
  category: CmsApplicationCategory!
  description: String!
  tagLine: String!
  searchTerms: String
  demoUrl: String
  appIcon: String!
  notificationEmail: String!
  appSubmissionContactEmail: String!
  supportEmail: String!
  supportPhone: String
  privacyPolicyUrl: String!
  websiteUrl: String
  faqUrl: String
  clientIdentifier: String
  clientSecret: String
}

"""Connection for CmsPublicApplication."""
type CmsPublicApplicationConnection {
  collection: [CmsPublicApplication]
  paginationInfo: CmsPublicApplicationPaginationInfo!
}

"""Information about the pagination."""
type CmsPublicApplicationPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

type CodeInjection {
  css: String
  js: JSInjection
}

input CodeInjectionInput {
  css: String
  js: JSInjectionInput
}

type CollectionCategory implements Node {
  id: ID!
  _id: Int
  createdAt: String!
  project: Data!
  priority: Int!
  title: String!
}

type CollectionEditor implements Node {
  id: ID!
  url: String!
  hidden: Boolean
  _id: Int
  createdAt: String!
  project: Data!
  title: String!
}

enum CollectionFieldPlacement {
  content
  sidebar
}

enum CollectionFieldTypeName {
  text
  richText
  password
  select
  check
  switch
  file
  image
  map
  dateTime
  color
  number
  email
  link
  videoLink
  phone
  gallery
  reference
  multiReference
}

type CollectionItem implements Node {
  id: ID!
  title: String!
  slug: String!

  """CollectionType"""
  type: CollectionType!
  status: CollectionItemStatus!

  """fixme: must be `[CollectionItemFieldInterface!]!`"""
  fields: [CollectionItemFieldInterface!]
  seo: SeoProps!
  social: SocialProps!
  createdAt: String!
  authorId: Int!

  """default value is false"""
  isHomepage: Boolean!
  pageData: String

  """Default value is public"""
  visibility: VisibilityStatus!
  itemPassword: String
  codeInjection: CodeInjection
}

"""Connection for CollectionItem."""
type CollectionItemConnection {
  collection: [CollectionItem]
  paginationInfo: CollectionItemPaginationInfo!
}

type CollectionItemField implements Node {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeField!
  values: CollectionItemFieldValues!
  _id: Int
  project: Data!
}

type CollectionItemFieldCheck implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  checkValues: CollectionItemFieldCheckValues!
}

type CollectionItemFieldCheckValues {
  value: [String!]!
}

input CollectionItemFieldCheckValuesInput {
  value: [String!]!
}

input CollectionItemFieldCheckValuesSearchQueryInput {
  value: StringSearchQueryInput
}

type CollectionItemFieldColor implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  colorValues: CollectionItemFieldColorValues!
}

type CollectionItemFieldColorValues {
  red: Int!
  green: Int!
  blue: Int!
  opacity: Float
}

input CollectionItemFieldColorValuesInput {
  red: Int!
  green: Int!
  blue: Int!
  opacity: Float
}

input CollectionItemFieldColorValuesSearchQueryInput {
  red: IntSearchQueryInput
  green: IntSearchQueryInput
  blue: IntSearchQueryInput
  opacity: FloatSearchQueryInput
}

type CollectionItemFieldDateTime implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  dateTimeValues: CollectionItemFieldDateTimeValues!
}

type CollectionItemFieldDateTimeValues {
  timestamp: Int!
}

input CollectionItemFieldDateTimeValuesInput {
  timestamp: Int!
}

input CollectionItemFieldDateTimeValuesSearchQueryInput {
  timestamp: IntSearchQueryInput
}

type CollectionItemFieldEmail implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  emailValues: CollectionItemFieldEmailValues!
}

type CollectionItemFieldEmailValues {
  value: String!
}

input CollectionItemFieldEmailValuesInput {
  value: String!
}

input CollectionItemFieldEmailValuesSearchQueryInput {
  value: StringSearchQueryInput
}

type CollectionItemFieldFile implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
}

type CollectionItemFieldGallery implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  galleryValues: CollectionItemFieldGalleryValues!
}

type CollectionItemFieldGalleryValues {
  images: [ImageValue]
}

input CollectionItemFieldGalleryValuesInput {
  images: [ImageValueInput]
}

type CollectionItemFieldImage implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  imageValues: CollectionItemFieldImageValues!
}

type CollectionItemFieldImageValues {
  id: String!
  focusPoint: Point
}

input CollectionItemFieldImageValuesInput {
  id: String!
  focusPoint: PointInput
}

input CollectionItemFieldInput {
  type: ID!
  values: CollectionItemFieldValuesInput!
}

interface CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
}

type CollectionItemFieldLink implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  linkValues: CollectionItemFieldLinkValues!
}

type CollectionItemFieldLinkValues {
  value: String!
}

input CollectionItemFieldLinkValuesInput {
  value: String!
}

type CollectionItemFieldMap implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
}

type CollectionItemFieldMultiReference implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  multiReferenceValues: CollectionItemFieldMultiReferenceValues!
}

type CollectionItemFieldMultiReferenceValues {
  collectionItems: [CollectionItemReference!]!
}

input CollectionItemFieldMultiReferenceValuesInput {
  collectionItems: [ID!]!
}

input CollectionItemFieldMultiReferenceValuesSearchQueryInput {
  collectionItems: CollectionItemReferenceSearchQueryInput
}

type CollectionItemFieldNumber implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  numberValues: CollectionItemFieldNumberValues!
}

type CollectionItemFieldNumberValues {
  value: Float!
}

input CollectionItemFieldNumberValuesInput {
  value: Float!
}

input CollectionItemFieldNumberValuesSearchQueryInput {
  value: FloatSearchQueryInput
}

type CollectionItemFieldPassword implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  passwordValues: CollectionItemFieldPasswordValues!
}

type CollectionItemFieldPasswordValues {
  password: String!
}

input CollectionItemFieldPasswordValuesInput {
  password: String!
}

type CollectionItemFieldPhone implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  phoneValues: CollectionItemFieldPhoneValues!
}

type CollectionItemFieldPhoneValues {
  value: String!
}

input CollectionItemFieldPhoneValuesInput {
  value: String!
}

type CollectionItemFieldReference implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  referenceValues: CollectionItemFieldReferenceValues!
}

type CollectionItemFieldReferenceValues {
  collectionItem: CollectionItemReference!
}

input CollectionItemFieldReferenceValuesInput {
  collectionItem: ID!
}

input CollectionItemFieldReferenceValuesSearchQueryInput {
  collectionItem: CollectionItemReferenceSearchQueryInput
}

type CollectionItemFieldRichText implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  richTextValues: CollectionItemFieldRichTextValues!
}

type CollectionItemFieldRichTextValues {
  value: String!
}

input CollectionItemFieldRichTextValuesInput {
  value: String!
}

input CollectionItemFieldRichTextValuesSearchQueryInput {
  value: TextSearchQueryInput
}

input CollectionItemFieldSearchQueryInput {
  _and: [CollectionItemFieldSearchQueryInput!]
  _or: [CollectionItemFieldSearchQueryInput!]
  _not: CollectionItemFieldSearchQueryInput
  checkValues: CollectionItemFieldCheckValuesSearchQueryInput
  colorValues: CollectionItemFieldColorValuesSearchQueryInput
  dateTimeValues: CollectionItemFieldDateTimeValuesSearchQueryInput
  emailValues: CollectionItemFieldEmailValuesSearchQueryInput
  multiReferenceValues: CollectionItemFieldMultiReferenceValuesSearchQueryInput
  numberValues: CollectionItemFieldNumberValuesSearchQueryInput
  referenceValues: CollectionItemFieldReferenceValuesSearchQueryInput
  richTextValues: CollectionItemFieldRichTextValuesSearchQueryInput
  selectValues: CollectionItemFieldSelectValuesSearchQueryInput
  switchValues: CollectionItemFieldSwitchValuesSearchQueryInput
  textValues: CollectionItemFieldTextValuesSearchQueryInput
  type: CollectionItemFieldTypeSearchQueryInput
}

type CollectionItemFieldSelect implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  selectValues: CollectionItemFieldSelectValues!
}

type CollectionItemFieldSelectValues {
  value: String
}

input CollectionItemFieldSelectValuesInput {
  value: String
}

input CollectionItemFieldSelectValuesSearchQueryInput {
  value: StringSearchQueryInput
}

type CollectionItemFieldSwitch implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  switchValues: CollectionItemFieldSwitchValues!
}

type CollectionItemFieldSwitchValues {
  value: Boolean!
}

input CollectionItemFieldSwitchValuesInput {
  value: Boolean!
}

input CollectionItemFieldSwitchValuesSearchQueryInput {
  value: BoolSearchQueryInput
}

type CollectionItemFieldText implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  textValues: CollectionItemFieldTextValues!
}

type CollectionItemFieldTextValues {
  value: String!
}

input CollectionItemFieldTextValuesInput {
  value: String!
}

input CollectionItemFieldTextValuesSearchQueryInput {
  value: TextSearchQueryInput
}

input CollectionItemFieldTypeSearchQueryInput {
  id: IdSearchQueryInput
  type: StringSearchQueryInput
  slug: StringSearchQueryInput
  label: StringAndTextSearchQueryInput
  required: BoolSearchQueryInput
  hidden: BoolSearchQueryInput
}

"""
Opaque object that holds field values. Use interface for specific field type values structure
"""
scalar CollectionItemFieldValues

"""Opaque object that holds field values"""
scalar CollectionItemFieldValuesInput

type CollectionItemFieldVideoLink implements CollectionItemFieldInterface {
  id: ID!
  item: CollectionItem!
  type: CollectionTypeFieldInterface!
  videoLinkValues: CollectionItemFieldVideoLinkValues!
}

type CollectionItemFieldVideoLinkValues {
  value: String!
}

input CollectionItemFieldVideoLinkValuesInput {
  value: String!
}

"""Information about the pagination."""
type CollectionItemPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

type CollectionItemReference {
  id: ID!
  title: String!
  slug: String!
  status: CollectionItemStatus!
}

input CollectionItemReferenceSearchQueryInput {
  id: IdSearchQueryInput
  title: StringAndTextSearchQueryInput
}

input CollectionItemSearchQueryInput {
  _and: [CollectionItemSearchQueryInput!]
  _or: [CollectionItemSearchQueryInput!]
  _not: CollectionItemSearchQueryInput
  title: StringAndTextSearchQueryInput
  status: StringSearchQueryInput
  createdAt: DateSearchQueryInput
  author: UserSearchQueryInput
  fields: CollectionItemFieldSearchQueryInput
}

enum CollectionItemsOrderBy {
  id
  title
  createdAt
  updatedAt
}

input CollectionItemsOrderInput {
  by: CollectionItemsOrderBy
  how: OrderMethod
}

enum CollectionItemStatus {
  draft
  published
}

type CollectionType implements Node {
  id: ID!
  slug: String!
  editor: CollectionEditor!
  category: CollectionCategory

  """fixme: must be `[CollectionTypeFieldInterface!]!`."""
  fields: [CollectionTypeFieldInterface!]
  settings: CollectionTypeSettings!
  hasPreview: Boolean
  public: Boolean
  showUI: Boolean
  showInMenu: Boolean
  _id: Int
  createdAt: String!
  project: Data!
  priority: Int!
  title: String!
}

type CollectionTypeField implements Node {
  id: ID!
  collectionType: CollectionType!
  type: CollectionFieldTypeName!
  slug: String
  required: Boolean!
  hidden: Boolean!
  unique: Boolean!
  label: String!
  description: String
  placement: CollectionFieldPlacement!
  _id: Int
  project: Data!
  priority: Int!
  createdAt: String!
  settings: CollectionTypeFieldSettings!
}

type CollectionTypeFieldCheck implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  checkSettings: CollectionTypeFieldCheckSettings!
}

type CollectionTypeFieldCheckSettings {
  choices: [CollectionTypeFieldCheckSettingsChoice!]!
}

type CollectionTypeFieldCheckSettingsChoice {
  title: String!
  value: String!
}

input CollectionTypeFieldCheckSettingsChoiceInput {
  title: String!
  value: String!
}

input CollectionTypeFieldCheckSettingsInput {
  choices: [CollectionTypeFieldCheckSettingsChoiceInput!]!
}

type CollectionTypeFieldColor implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
}

type CollectionTypeFieldDateTime implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  dateTimeSettings: CollectionTypeFieldDateTimeSettings!
}

type CollectionTypeFieldDateTimeSettings {
  time: Boolean
}

input CollectionTypeFieldDateTimeSettingsInput {
  time: Boolean
}

type CollectionTypeFieldEmail implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  emailSettings: CollectionTypeFieldEmailSettings!
}

type CollectionTypeFieldEmailSettings {
  placeholder: String
}

input CollectionTypeFieldEmailSettingsInput {
  placeholder: String
}

type CollectionTypeFieldFile implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
}

type CollectionTypeFieldGallery implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
}

type CollectionTypeFieldImage implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
}

input CollectionTypeFieldInput {
  priority: Int
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement

  """Default: false"""
  required: Boolean

  """Default: false"""
  hidden: Boolean

  """Default: false"""
  unique: Boolean
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettingsInput
}

interface CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
}

type CollectionTypeFieldLink implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  linkSettings: CollectionTypeFieldLinkSettings!
}

type CollectionTypeFieldLinkSettings {
  placeholder: String
}

input CollectionTypeFieldLinkSettingsInput {
  placeholder: String
}

type CollectionTypeFieldMap implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
}

type CollectionTypeFieldMultiReference implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  multiReferenceSettings: CollectionTypeFieldMultiReferenceSettings!
}

type CollectionTypeFieldMultiReferenceSettings {
  collectionType: CollectionTypeReference!
}

input CollectionTypeFieldMultiReferenceSettingsInput {
  collectionType: ID!
}

type CollectionTypeFieldNumber implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  numberSettings: CollectionTypeFieldNumberSettings!
}

type CollectionTypeFieldNumberSettings {
  min: Float
  max: Float
  step: Float
  placeholder: String
}

input CollectionTypeFieldNumberSettingsInput {
  min: Float
  max: Float
  step: Float
  placeholder: String
}

type CollectionTypeFieldPassword implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  passwordSettings: CollectionTypeFieldPasswordSettings!
}

type CollectionTypeFieldPasswordSettings {
  minLength: Int
  placeholder: String
}

input CollectionTypeFieldPasswordSettingsInput {
  minLength: Int
  placeholder: String
}

type CollectionTypeFieldPhone implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  phoneSettings: CollectionTypeFieldPhoneSettings!
}

type CollectionTypeFieldPhoneSettings {
  placeholder: String
}

input CollectionTypeFieldPhoneSettingsInput {
  placeholder: String
}

type CollectionTypeFieldReference implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  referenceSettings: CollectionTypeFieldReferenceSettings!
}

type CollectionTypeFieldReferenceSettings {
  collectionType: CollectionTypeReference!
}

input CollectionTypeFieldReferenceSettingsInput {
  collectionType: ID!
}

type CollectionTypeFieldRichText implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  richTextSettings: CollectionTypeFieldRichTextSettings!
}

type CollectionTypeFieldRichTextSettings {
  minLength: Int
  maxLength: Int
  placeholder: String
}

input CollectionTypeFieldRichTextSettingsInput {
  minLength: Int
  maxLength: Int
  placeholder: String
}

type CollectionTypeFieldSelect implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  selectSettings: CollectionTypeFieldSelectSettings!
}

type CollectionTypeFieldSelectSettings {
  choices: [CollectionTypeFieldSelectSettingsChoice!]!
  placeholder: String
}

type CollectionTypeFieldSelectSettingsChoice {
  title: String!
  value: String!
}

input CollectionTypeFieldSelectSettingsChoiceInput {
  title: String!
  value: String!
}

input CollectionTypeFieldSelectSettingsInput {
  choices: [CollectionTypeFieldSelectSettingsChoiceInput!]!
  placeholder: String
}

"""
Opaque object that holds field settings. Use interface for specific field type settings structure
"""
scalar CollectionTypeFieldSettings

"""Opaque object that holds field settings"""
scalar CollectionTypeFieldSettingsInput

type CollectionTypeFieldSwitch implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
}

type CollectionTypeFieldText implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  textSettings: CollectionTypeFieldTextSettings!
}

type CollectionTypeFieldTextSettings {
  minLength: Int
  maxLength: Int
  placeholder: String
}

input CollectionTypeFieldTextSettingsInput {
  minLength: Int
  maxLength: Int
  placeholder: String
}

input CollectionTypeFieldUpdateInput {
  """Existing field id (to create use `createCollectionTypeField`)"""
  id: ID!
  priority: Int
  label: String
  slug: String
  description: String
  placement: CollectionFieldPlacement
  required: Boolean
  hidden: Boolean
  unique: Boolean
  settings: CollectionTypeFieldSettingsInput
}

type CollectionTypeFieldVideoLink implements CollectionTypeFieldInterface {
  id: ID!
  collectionType: CollectionType!
  priority: Int!
  required: Boolean!
  hidden: Boolean!
  label: String!
  slug: String
  description: String
  placement: CollectionFieldPlacement!
  type: CollectionFieldTypeName!
  settings: CollectionTypeFieldSettings!
  videoLinkSettings: CollectionTypeFieldVideoLinkSettings!
}

type CollectionTypeFieldVideoLinkSettings {
  placeholder: String
}

input CollectionTypeFieldVideoLinkSettingsInput {
  placeholder: String
}

type CollectionTypeReference {
  id: ID!
  title: String!
}

type CollectionTypeSettings {
  icon: String
  hidden: Boolean!
  titleSingular: String
  titlePlural: String
}

input CollectionTypeSettingsInput {
  icon: String
  hidden: Boolean
  titleSingular: String
  titlePlural: String
}

input createCmsApplicationInstallInput {
  application: ID!
  project: ID!
  clientMutationId: String
}

type createCmsApplicationInstallPayload {
  cmsApplicationInstall: CmsApplicationInstall
  clientMutationId: String
}

input createCmsPrivateApplicationInput {
  title: String!
  appUrl: String
  redirectUris: [String!]!
  clientMutationId: String
}

type createCmsPrivateApplicationPayload {
  cmsPrivateApplication: CmsPrivateApplication
  clientMutationId: String
}

input createCmsPublicApplicationInput {
  title: String!
  appUrl: String
  redirectUris: [String!]!
  category: ID!
  description: String!
  tagLine: String!
  searchTerms: String
  demoUrl: String
  appIcon: String!
  notificationEmail: String!
  appSubmissionContactEmail: String!
  supportEmail: String!
  supportPhone: String
  privacyPolicyUrl: String!
  websiteUrl: String
  faqUrl: String
  clientMutationId: String
}

type createCmsPublicApplicationPayload {
  cmsPublicApplication: CmsPublicApplication
  clientMutationId: String
}

input createCollectionEditorInput {
  title: String!
  url: String!
  hidden: Boolean!
  clientMutationId: String
}

type createCollectionEditorPayload {
  collectionEditor: CollectionEditor
  clientMutationId: String
}

input createCollectionItemInput {
  """CollectionType"""
  type: ID!
  status: CollectionItemStatus
  fields: [CollectionItemFieldInput!]
  title: String!
  slug: String
  seo: SeoPropsInput
  social: SocialPropsInput

  """default value is false"""
  isHomepage: Boolean
  pageData: String
  codeInjection: CodeInjectionInput

  """Default value is public"""
  visibility: VisibilityStatus
  itemPassword: String
  clientMutationId: String
}

type createCollectionItemPayload {
  collectionItem: CollectionItem
  clientMutationId: String
}

input createCollectionTypeFieldInput {
  """CollectionType"""
  collectionType: ID!
  type: CollectionFieldTypeName!
  label: String!
  description: String
  slug: String
  placement: CollectionFieldPlacement
  priority: Int
  required: Boolean
  hidden: Boolean
  unique: Boolean
  settings: CollectionTypeFieldSettings
  clientMutationId: String
}

type createCollectionTypeFieldPayload {
  collectionTypeField: CollectionTypeField
  clientMutationId: String
}

input createCollectionTypeInput {
  """CollectionEditor"""
  editor: ID!
  category: ID
  title: String!
  slug: String
  priority: Int
  fields: [CollectionTypeFieldInput!]
  settings: CollectionTypeSettingsInput

  """Default value is true"""
  hasPreview: Boolean

  """Default value is true"""
  public: Boolean

  """Default value is true"""
  showUI: Boolean

  """Default value is true"""
  showInMenu: Boolean
  clientMutationId: String
}

type createCollectionTypePayload {
  collectionType: CollectionType
  clientMutationId: String
}

input createCustomerGroupInput {
  name: String!
  clientMutationId: String
}

type createCustomerGroupPayload {
  customerGroup: CustomerGroup
  clientMutationId: String
}

input createCustomerInput {
  email: String!
  userName: String
  firstName: String
  lastName: String
  password: String
  passwordConfirm: String
  phone: String
  verifiedEmail: Boolean
  customerGroups: [CustomerGroupPropsInput!]
  sendEmailInvite: Boolean
  pageData: String
  codeInjection: CodeInjectionInput
  clientMutationId: String
}

type createCustomerPayload {
  customer: Customer
  clientMutationId: String
}

input createRedirectInput {
  path: String!
  target: String!
  clientMutationId: String
}

type createRedirectPayload {
  redirect: Redirect
  clientMutationId: String
}

input createScriptTagInput {
  src: String!
  clientMutationId: String
}

type createScriptTagPayload {
  scriptTag: ScriptTag
  clientMutationId: String
}

input createWebhookInput {
  collectionType: ID
  url: String!
  objectName: WebhookObjectName!
  hookCreate: Boolean
  hookUpdate: Boolean
  hookDelete: Boolean
  enabled: Boolean!
  clientMutationId: String
}

type createWebhookPayload {
  webhook: Webhook
  clientMutationId: String
}

type Customer implements Node {
  id: ID!
  email: String!
  userName: String!
  firstName: String
  lastName: String
  phone: String
  verifiedEmail: Boolean!
  customerGroups: [CustomerGroup!]
  sendEmailInvite: Boolean!
  activationUrl: String
  state: CustomerStateStatus
  resetPasswordTokenExpire: DateTime
  pageData: String
  codeInjection: CodeInjection
}

"""Connection for Customer."""
type CustomerConnection {
  collection: [Customer]
  paginationInfo: CustomerPaginationInfo!
}

type CustomerGroup implements Node {
  id: ID!
  name: String
  customers(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
    searchByText: String
    id: ID
    includeId: ID
    excludeId: ID
    id_list: [ID]
    includeId_list: [ID]
    excludeId_list: [ID]
    userName: String
    includeUserName: String
    excludeUserName: String
    email: String
    includeEmail: String
    excludeEmail: String
    firstName: String
    includeFirstName: String
    excludeFirstName: String
    lastName: String
    includeLastName: String
    excludeLastName: String
    customerGroup: ID
    includeCustomerGroup: ID
    excludeCustomerGroup: ID
    customerGroup_list: [ID]
    includeCustomerGroup_list: [ID]
    excludeCustomerGroup_list: [ID]
    offset: Int
  ): CustomerConnection
  _id: Int
  project: Data!
  createdAt: String!
  updatedAt: String
}

"""Connection for CustomerGroup."""
type CustomerGroupConnection {
  collection: [CustomerGroup]
  paginationInfo: CustomerGroupPaginationInfo!
}

"""Information about the pagination."""
type CustomerGroupPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

input CustomerGroupPropsInput {
  id: ID!
}

"""Information about the pagination."""
type CustomerPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

enum CustomerStateStatus {
  enabled
  disabled
}

type Data {
  id: ID!
}

"""Timestamp UTC"""
input DateSearchQueryInput {
  eq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
}

"""The `DateTime` scalar type represents time data."""
scalar DateTime

input deleteCmsApplicationInstallInput {
  id: ID!
  clientMutationId: String
}

type deleteCmsApplicationInstallPayload {
  cmsApplicationInstall: CmsApplicationInstall
  clientMutationId: String
}

input deleteCmsPrivateApplicationInput {
  id: ID!
  clientMutationId: String
}

type deleteCmsPrivateApplicationPayload {
  cmsPrivateApplication: CmsPrivateApplication
  clientMutationId: String
}

input deleteCmsPublicApplicationInput {
  id: ID!
  clientMutationId: String
}

type deleteCmsPublicApplicationPayload {
  cmsPublicApplication: CmsPublicApplication
  clientMutationId: String
}

input deleteCollectionEditorInput {
  id: ID!
  clientMutationId: String
}

type deleteCollectionEditorPayload {
  collectionEditor: CollectionEditor
  clientMutationId: String
}

input deleteCollectionItemFieldInput {
  id: ID!
  clientMutationId: String
}

type deleteCollectionItemFieldPayload {
  collectionItemField: CollectionItemField
  clientMutationId: String
}

input deleteCollectionItemInput {
  id: ID!
  clientMutationId: String
}

type deleteCollectionItemPayload {
  collectionItem: CollectionItem
  clientMutationId: String
}

input deleteCollectionTypeFieldInput {
  id: ID!
  clientMutationId: String
}

type deleteCollectionTypeFieldPayload {
  collectionTypeField: CollectionTypeField
  clientMutationId: String
}

input deleteCollectionTypeInput {
  id: ID!
  clientMutationId: String
}

type deleteCollectionTypePayload {
  collectionType: CollectionType
  clientMutationId: String
}

input deleteCustomerGroupInput {
  id: ID!
  clientMutationId: String
}

type deleteCustomerGroupPayload {
  customerGroup: CustomerGroup
  clientMutationId: String
}

input deleteCustomerInput {
  id: ID!
  clientMutationId: String
}

type deleteCustomerPayload {
  customer: Customer
  clientMutationId: String
}

input deleteRedirectInput {
  id: ID!
  clientMutationId: String
}

type deleteRedirectPayload {
  redirect: Redirect
  clientMutationId: String
}

input deleteScriptTagInput {
  id: ID!
  clientMutationId: String
}

type deleteScriptTagPayload {
  scriptTag: ScriptTag
  clientMutationId: String
}

input deleteWebhookInput {
  id: ID!
  clientMutationId: String
}

type deleteWebhookPayload {
  webhook: Webhook
  clientMutationId: String
}

type File implements Node {
  id: ID!
  _id: Int
  name: String!
  project: Data!
}

input FloatSearchQueryInput {
  eq: Float
  lt: Float
  lte: Float
  gt: Float
  gte: Float
}

input IdSearchQueryInput {
  eq: Int
  in: [Int!]
}

type Image implements Node {
  id: ID!
  _id: Int
  name: String!
}

type ImageValue {
  id: String
  focusPoint: Point
}

input ImageValueInput {
  id: String
  focusPoint: PointInput
}

input IntSearchQueryInput {
  eq: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

"""
The `Iterable` scalar type represents an array or a Traversable with any kind of data.
"""
scalar Iterable

type JSInjection {
  header: String
  footer: String
}

input JSInjectionInput {
  header: String
  footer: String
}

type Metafield implements Node {
  id: ID!
  name: String
  type: String
  value: String
  _id: Int
  createdAt: String
  updatedAt: String
}

type Mutation {
  """Updates a Metafield."""
  updateMetafield(input: updateMetafieldInput!): updateMetafieldPayload

  """Activates a Customer."""
  activateCustomer(input: activateCustomerInput!): activateCustomerPayload

  """ResetPasswords a Customer."""
  resetPasswordCustomer(input: resetPasswordCustomerInput!): resetPasswordCustomerPayload

  """ValidateResetPasswordTokens a Customer."""
  validateResetPasswordTokenCustomer(input: validateResetPasswordTokenCustomerInput!): validateResetPasswordTokenCustomerPayload

  """UpdatePasswords a Customer."""
  updatePasswordCustomer(input: updatePasswordCustomerInput!): updatePasswordCustomerPayload

  """ChangePasswords a Customer."""
  changePasswordCustomer(input: changePasswordCustomerInput!): changePasswordCustomerPayload

  """CheckCredentialss a Customer."""
  checkCredentialsCustomer(input: checkCredentialsCustomerInput!): checkCredentialsCustomerPayload

  """Creates a Customer."""
  createCustomer(input: createCustomerInput!): createCustomerPayload

  """Updates a Customer."""
  updateCustomer(input: updateCustomerInput!): updateCustomerPayload

  """Deletes a Customer."""
  deleteCustomer(input: deleteCustomerInput!): deleteCustomerPayload

  """Creates a CmsPrivateApplication."""
  createCmsPrivateApplication(input: createCmsPrivateApplicationInput!): createCmsPrivateApplicationPayload

  """Updates a CmsPrivateApplication."""
  updateCmsPrivateApplication(input: updateCmsPrivateApplicationInput!): updateCmsPrivateApplicationPayload

  """Deletes a CmsPrivateApplication."""
  deleteCmsPrivateApplication(input: deleteCmsPrivateApplicationInput!): deleteCmsPrivateApplicationPayload

  """Creates a CmsPublicApplication."""
  createCmsPublicApplication(input: createCmsPublicApplicationInput!): createCmsPublicApplicationPayload

  """Updates a CmsPublicApplication."""
  updateCmsPublicApplication(input: updateCmsPublicApplicationInput!): updateCmsPublicApplicationPayload

  """Deletes a CmsPublicApplication."""
  deleteCmsPublicApplication(input: deleteCmsPublicApplicationInput!): deleteCmsPublicApplicationPayload

  """Creates a Redirect."""
  createRedirect(input: createRedirectInput!): createRedirectPayload

  """Updates a Redirect."""
  updateRedirect(input: updateRedirectInput!): updateRedirectPayload

  """Deletes a Redirect."""
  deleteRedirect(input: deleteRedirectInput!): deleteRedirectPayload

  """Creates a CustomerGroup."""
  createCustomerGroup(input: createCustomerGroupInput!): createCustomerGroupPayload

  """Updates a CustomerGroup."""
  updateCustomerGroup(input: updateCustomerGroupInput!): updateCustomerGroupPayload

  """Deletes a CustomerGroup."""
  deleteCustomerGroup(input: deleteCustomerGroupInput!): deleteCustomerGroupPayload

  """Creates a Webhook."""
  createWebhook(input: createWebhookInput!): createWebhookPayload

  """Updates a Webhook."""
  updateWebhook(input: updateWebhookInput!): updateWebhookPayload

  """Deletes a Webhook."""
  deleteWebhook(input: deleteWebhookInput!): deleteWebhookPayload

  """Creates a CmsApplicationInstall."""
  createCmsApplicationInstall(input: createCmsApplicationInstallInput!): createCmsApplicationInstallPayload

  """Deletes a CmsApplicationInstall."""
  deleteCmsApplicationInstall(input: deleteCmsApplicationInstallInput!): deleteCmsApplicationInstallPayload

  """Creates a ScriptTag."""
  createScriptTag(input: createScriptTagInput!): createScriptTagPayload

  """Updates a ScriptTag."""
  updateScriptTag(input: updateScriptTagInput!): updateScriptTagPayload

  """Deletes a ScriptTag."""
  deleteScriptTag(input: deleteScriptTagInput!): deleteScriptTagPayload

  """Creates a CollectionType."""
  createCollectionType(input: createCollectionTypeInput!): createCollectionTypePayload

  """Updates a CollectionType."""
  updateCollectionType(input: updateCollectionTypeInput!): updateCollectionTypePayload

  """Deletes a CollectionType."""
  deleteCollectionType(input: deleteCollectionTypeInput!): deleteCollectionTypePayload

  """Creates a CollectionEditor."""
  createCollectionEditor(input: createCollectionEditorInput!): createCollectionEditorPayload

  """Updates a CollectionEditor."""
  updateCollectionEditor(input: updateCollectionEditorInput!): updateCollectionEditorPayload

  """Deletes a CollectionEditor."""
  deleteCollectionEditor(input: deleteCollectionEditorInput!): deleteCollectionEditorPayload

  """Deletes a CollectionItemField."""
  deleteCollectionItemField(input: deleteCollectionItemFieldInput!): deleteCollectionItemFieldPayload

  """Creates a CollectionItem."""
  createCollectionItem(input: createCollectionItemInput!): createCollectionItemPayload

  """Updates a CollectionItem."""
  updateCollectionItem(input: updateCollectionItemInput!): updateCollectionItemPayload

  """Deletes a CollectionItem."""
  deleteCollectionItem(input: deleteCollectionItemInput!): deleteCollectionItemPayload

  """Creates a CollectionTypeField."""
  createCollectionTypeField(input: createCollectionTypeFieldInput!): createCollectionTypeFieldPayload

  """Updates a CollectionTypeField."""
  updateCollectionTypeField(input: updateCollectionTypeFieldInput!): updateCollectionTypeFieldPayload

  """Deletes a CollectionTypeField."""
  deleteCollectionTypeField(input: deleteCollectionTypeFieldInput!): deleteCollectionTypeFieldPayload

  """Uploads a Image."""
  uploadImage(input: uploadImageInput!): uploadImagePayload

  """Uploads a File."""
  uploadFile(input: uploadFileInput!): uploadFilePayload
}

"""A node, according to the Relay specification."""
interface Node {
  """The id of this node."""
  id: ID!
}

enum OrderMethod {
  asc
  desc
}

type Point {
  x: Int!
  y: Int!
}

input PointInput {
  x: Int!
  y: Int!
}

type Product implements Node {
  id: ID!
  code: String!
  _id: Int
  project: Data!
  createdAt: String!
  seo: SeoProps!
  social: SocialProps!
}

"""Connection for Product."""
type ProductConnection {
  collection: [Product]
  paginationInfo: ProductPaginationInfo!
}

"""Information about the pagination."""
type ProductPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

type Query {
  node(id: ID!): Node
  cmsApplicationCategories(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
  ): CmsApplicationCategoryConnection
  cmsApplicationCategory(id: ID!): CmsApplicationCategory
  metafields: [Metafield]
  metafield(id: ID!): Metafield
  metafieldByName(name: String!): Metafield
  customers(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
    searchByText: String
    id: ID
    includeId: ID
    excludeId: ID
    id_list: [ID]
    includeId_list: [ID]
    excludeId_list: [ID]
    userName: String
    includeUserName: String
    excludeUserName: String
    email: String
    includeEmail: String
    excludeEmail: String
    firstName: String
    includeFirstName: String
    excludeFirstName: String
    lastName: String
    includeLastName: String
    excludeLastName: String
    customerGroup: ID
    includeCustomerGroup: ID
    excludeCustomerGroup: ID
    customerGroup_list: [ID]
    includeCustomerGroup_list: [ID]
    excludeCustomerGroup_list: [ID]
    offset: Int
  ): CustomerConnection
  customer(id: ID!): Customer
  customerByUserName(userName: String!): Customer
  cmsPrivateApplications(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
  ): CmsPrivateApplicationConnection
  cmsPrivateApplication(id: ID!): CmsPrivateApplication
  products(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
  ): ProductConnection
  cmsPublicApplications(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
    status: String
    status_list: [String]
    title: String
    description: String
    category: ID
    category_list: [ID]
  ): CmsPublicApplicationConnection
  cmsPublicApplication(id: ID!): CmsPublicApplication
  redirects(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
  ): RedirectConnection
  redirect(id: ID!): Redirect
  customerGroups(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
    name: String
  ): CustomerGroupConnection
  customerGroup(id: ID!): CustomerGroup
  webhooks(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
  ): WebhookConnection
  webhook(id: ID!): Webhook
  cmsApplicationInstalls(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
    project: ID!
    project_list: [ID]
  ): CmsApplicationInstallConnection
  scriptTags(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
  ): ScriptTagConnection
  scriptTag(id: ID!): ScriptTag
  collectionTypes: [CollectionType]
  collectionType(id: ID!): CollectionType
  collectionTypeBySlug(slug: String!): CollectionType
  collectionEditors: [CollectionEditor]
  collectionEditor(id: ID!): CollectionEditor
  collectionCategories: [CollectionCategory]
  collectionItemFieldBySlug(item: ID!, slug: String!): CollectionItemField
  collectionItems(
    """Returns the current page."""
    page: Int

    """Returns the number of items per page."""
    itemsPerPage: Int
    type: ID!
    order: CollectionItemsOrderInput
    id: ID
    includeId: ID
    excludeId: ID
    id_list: [ID]
    includeId_list: [ID]
    excludeId_list: [ID]
    title: String
    includeTitle: String
    excludeTitle: String
    slug: String
    includeSlug: String
    excludeSlug: String
    status: CollectionItemStatus
    includeStatus: CollectionItemStatus
    excludeStatus: CollectionItemStatus
    status_list: [CollectionItemStatus]
    includeStatus_list: [CollectionItemStatus]
    excludeStatus_list: [CollectionItemStatus]
    reference: ReferenceFilterInput
    includeReference: ReferenceFilterInput
    excludeReference: ReferenceFilterInput
    reference_list: [ReferenceFilterInput]
    includeReference_list: [ReferenceFilterInput]
    excludeReference_list: [ReferenceFilterInput]
    isHomepage: Boolean
    includeIsHomepage: Boolean
    excludeIsHomepage: Boolean
    offset: Int
  ): CollectionItemConnection
  collectionItem(id: ID!): CollectionItem
  collectionItemBySlug(slug: String!): CollectionItem
  searchCollectionItems(type: ID!, search: CollectionItemSearchQueryInput, page: Int, itemsPerPage: Int): CollectionItemConnection
  collectionTypeFieldBySlug(collectionType: ID!, slug: String!): CollectionTypeField
}

type Redirect implements Node {
  id: ID!
  path: String!
  target: String!
  _id: Int
  createdAt: String!
  project: Data!
}

"""Connection for Redirect."""
type RedirectConnection {
  collection: [Redirect]
  paginationInfo: RedirectPaginationInfo!
}

"""Information about the pagination."""
type RedirectPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

input ReferenceFilterInput {
  field: ID
  item: ID!
}

input resetPasswordCustomerInput {
  """Customer's email"""
  email: String!
  clientMutationId: String
}

type resetPasswordCustomerPayload {
  customer: Customer
  clientMutationId: String
}

type ScriptTag implements Node {
  id: ID!
  _id: Int
  src: String!
  createdAt: String!
  project: Data!
}

"""Connection for ScriptTag."""
type ScriptTagConnection {
  collection: [ScriptTag]
  paginationInfo: ScriptTagPaginationInfo!
}

"""Information about the pagination."""
type ScriptTagPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

type SeoProps {
  title: String
  description: String
  enableIndexing: Boolean
}

input SeoPropsInput {
  title: String
  description: String
  enableIndexing: Boolean
}

type SocialProps {
  title: String
  description: String
  image: String
}

input SocialPropsInput {
  title: String
  description: String
  image: String
}

input StringAndTextSearchQueryInput {
  eq: String
  words: String
}

input StringSearchQueryInput {
  eq: String
}

input TextSearchQueryInput {
  words: String
}

input updateCmsPrivateApplicationInput {
  id: ID!
  title: String
  appUrl: String
  redirectUris: [String!]
  clientMutationId: String
}

type updateCmsPrivateApplicationPayload {
  cmsPrivateApplication: CmsPrivateApplication
  clientMutationId: String
}

input updateCmsPublicApplicationInput {
  id: ID!
  title: String
  status: CmsApplicationStatus
  appUrl: String
  redirectUris: [String!]
  category: ID
  description: String
  tagLine: String
  searchTerms: String
  demoUrl: String
  appIcon: String
  notificationEmail: String
  appSubmissionContactEmail: String
  supportEmail: String
  supportPhone: String
  privacyPolicyUrl: String
  websiteUrl: String
  faqUrl: String
  clientMutationId: String
}

type updateCmsPublicApplicationPayload {
  cmsPublicApplication: CmsPublicApplication
  clientMutationId: String
}

input updateCollectionEditorInput {
  id: ID!
  title: String
  url: String
  hidden: Boolean
  clientMutationId: String
}

type updateCollectionEditorPayload {
  collectionEditor: CollectionEditor
  clientMutationId: String
}

input updateCollectionItemInput {
  id: ID!
  status: CollectionItemStatus
  fields: [CollectionItemFieldInput!]
  title: String
  slug: String
  seo: SeoPropsInput
  social: SocialPropsInput
  isHomepage: Boolean
  pageData: String
  codeInjection: CodeInjectionInput
  visibility: VisibilityStatus
  itemPassword: String
  clientMutationId: String
}

type updateCollectionItemPayload {
  collectionItem: CollectionItem
  clientMutationId: String
}

input updateCollectionTypeFieldInput {
  id: ID!
  label: String
  description: String
  slug: String
  placement: CollectionFieldPlacement
  priority: Int
  required: Boolean
  hidden: Boolean
  settings: CollectionTypeFieldSettings
  clientMutationId: String
}

type updateCollectionTypeFieldPayload {
  collectionTypeField: CollectionTypeField
  clientMutationId: String
}

input updateCollectionTypeInput {
  id: ID!

  """CollectionEditor"""
  editor: ID
  category: ID
  title: String
  slug: String
  priority: Int
  settings: CollectionTypeSettingsInput
  fields: [CollectionTypeFieldUpdateInput!]
  hasPreview: Boolean

  """Default value is true"""
  public: Boolean

  """Default value is true"""
  showUI: Boolean

  """Default value is true"""
  showInMenu: Boolean
  clientMutationId: String
}

type updateCollectionTypePayload {
  collectionType: CollectionType
  clientMutationId: String
}

input updateCustomerGroupInput {
  id: ID!
  name: String
  clientMutationId: String
}

type updateCustomerGroupPayload {
  customerGroup: CustomerGroup
  clientMutationId: String
}

input updateCustomerInput {
  id: ID!
  email: String
  userName: String
  firstName: String
  lastName: String
  password: String
  passwordConfirm: String
  phone: String
  verifiedEmail: Boolean
  customerGroups: [CustomerGroupPropsInput!]
  sendEmailInvite: Boolean
  pageData: String
  codeInjection: CodeInjectionInput
  clientMutationId: String
}

type updateCustomerPayload {
  customer: Customer
  clientMutationId: String
}

input updateMetafieldInput {
  id: ID!
  value: String
  clientMutationId: String
}

type updateMetafieldPayload {
  metafield: Metafield
  clientMutationId: String
}

input updatePasswordCustomerInput {
  """New password"""
  password: String!

  """Token for update forgotten password"""
  resetPasswordToken: String!
  clientMutationId: String
}

type updatePasswordCustomerPayload {
  customer: Customer
  clientMutationId: String
}

input updateRedirectInput {
  id: ID!
  path: String
  target: String
  clientMutationId: String
}

type updateRedirectPayload {
  redirect: Redirect
  clientMutationId: String
}

input updateScriptTagInput {
  id: ID!
  src: String
  clientMutationId: String
}

type updateScriptTagPayload {
  scriptTag: ScriptTag
  clientMutationId: String
}

input updateWebhookInput {
  id: ID!
  collectionType: ID
  url: String
  objectName: WebhookObjectName
  hookCreate: Boolean
  hookUpdate: Boolean
  hookDelete: Boolean
  enabled: Boolean
  clientMutationId: String
}

type updateWebhookPayload {
  webhook: Webhook
  clientMutationId: String
}

"""
The `Upload` type represents a file to be uploaded in the same HTTP request as specified by [graphql-multipart-request-spec](https://github.com/jaydenseric/graphql-multipart-request-spec).
"""
scalar Upload

input uploadFileInput {
  file: Upload!
  clientMutationId: String
}

type uploadFilePayload {
  file: File
  clientMutationId: String
}

input uploadImageInput {
  file: Upload!
  clientMutationId: String
}

type uploadImagePayload {
  image: Image
  clientMutationId: String
}

input UserSearchQueryInput {
  id: IdSearchQueryInput
}

input validateResetPasswordTokenCustomerInput {
  """Reset password token."""
  resetToken: String!
  clientMutationId: String
}

type validateResetPasswordTokenCustomerPayload {
  customer: Customer
  clientMutationId: String
}

enum VisibilityStatus {
  public
  passwordProtected
}

type Webhook implements Node {
  id: ID!
  _id: Int
  collectionType: CollectionType
  url: String!
  objectName: WebhookObjectName!
  hookCreate: Boolean!
  hookUpdate: Boolean!
  hookDelete: Boolean!
  enabled: Boolean!
  createdAt: String!
  project: Data!
}

"""Connection for Webhook."""
type WebhookConnection {
  collection: [Webhook]
  paginationInfo: WebhookPaginationInfo!
}

enum WebhookObjectName {
  CollectionType
  CollectionItem
  Customer
  CustomerGroup
}

"""Information about the pagination."""
type WebhookPaginationInfo {
  itemsPerPage: Int!
  lastPage: Int!
  totalCount: Int!
}

